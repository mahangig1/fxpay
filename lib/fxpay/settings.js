define([
  'exports',
  'adapter',
  'errors'
], function(exports, adapter, errors) {

  'use strict';
  var pkgInfo = {"version": "0.0.18"};  // this is updated by `grunt bump`

  var defaultSettings = {

    // Public settings.
    //
    // Reject test receipts which are generated by the Marketplace
    // and do not indicate real purchases.
    allowTestReceipts: false,
    apiUrlBase: 'https://marketplace.firefox.com',
    apiVersionPrefix: '/api/v1',
    // When truthy, this will override the API object's default.
    apiTimeoutMs: null,
    // When defined, this optional map will override or
    // append values to payProviderUrls.
    extraProviderUrls: null,
    // When true, work with fake products and test receipts.
    // This implies allowTestReceipts=true.
    fakeProducts: false,
    // This object is used for all logging.
    log: window.console || {
      // Shim in a minimal set of the console API.
      debug: function() {},
      error: function() {},
      info: function() {},
      log: function() {},
      warn: function() {},
    },
    // Only these receipt check services are allowed.
    receiptCheckSites: [
      'https://receiptcheck.marketplace.firefox.com',
      'https://marketplace.firefox.com'
    ],

    // Private settings.
    //
    adapter: null,
    // This will be the App object returned from mozApps.getSelf().
    // On platforms that do not implement mozApps it will be false.
    appSelf: null,
    // True if configuration has been run at least once.
    alreadyConfigured: false,
    // Map of product IDs to installed receipts.
    // These receipts may or may not be valid.
    productReceiptMap: null,
    // Map of JWT types to payment provider URLs.
    payProviderUrls: {
      'mozilla/payments/pay/v1':
          'https://marketplace.firefox.com/mozpay/?req={jwt}'
    },
    // Reference window so tests can swap it out with a stub.
    window: window,
    // Width for payment window as a popup.
    winWidth: 276,
    // Height for payment window as a popup.
    winHeight: 384,
    // Relative API URL that accepts a product ID and returns a JWT.
    prepareJwtApiUrl: '/webpay/inapp/prepare/',
    onerror: function(err) {
      throw err;
    },
    oninit: function() {
      exports.log.info('fxpay version:', exports.libVersion);
      exports.log.info('initialization ran successfully');
    },
    onrestore: function(error, info) {
      if (error) {
        exports.log.error('error while restoring product:', info.productId,
                          'message:', error);
      } else {
        exports.log.info('product', info.productId,
                         'was restored from receipt');
      }
    },
    localStorage: window.localStorage || null,
    localStorageKey: 'fxpayReceipts',
    // When true, we're running on a broken webRT. See bug 1133963.
    onBrokenWebRT: (navigator.mozPay &&
                    navigator.userAgent.indexOf('Mobile') === -1),
    mozPay: navigator.mozPay || null,
    mozApps: navigator.mozApps || null,
    libVersion: pkgInfo.version,
  };

  exports.configure = function settings_configure(newSettings, opt) {
    //
    // Configure new settings values.
    //
    opt = opt || {};

    // On first run, we always need to reset.
    if (!exports.alreadyConfigured) {
      opt.reset = true;
    }

    // Reset existing configuration.
    if (opt.reset) {
      for (var def in defaultSettings) {
        exports[def] = defaultSettings[def];
      }
    }

    // Merge new values into existing configuration.
    for (var param in newSettings) {
      if (typeof exports[param] === 'undefined') {
        return exports.onerror(errors.IncorrectUsage(
                      'configure() received an unknown setting: ' + param));
      }
      exports[param] = newSettings[param];
    }

    // Set some implied values from other parameters.
    if (exports.extraProviderUrls) {
      exports.log.info('adding extra pay provider URLs',
                       exports.extraProviderUrls);
      for (var paySpec in exports.extraProviderUrls) {
        exports.payProviderUrls[paySpec] = exports.extraProviderUrls[paySpec];
      }
    }
    if (exports.fakeProducts) {
      exports.allowTestReceipts = true;
    }

    // Construct our in-app payments adapter.
    var DefaultAdapter = adapter.FxInappAdapter;
    if (!exports.adapter) {
      exports.log.info('creating default adapter');
      exports.adapter = new DefaultAdapter();
    }

    // Configure the new adapter or re-configure an existing adapter.
    exports.adapter.configure(exports);
    exports.log.info('using adapter:', exports.adapter.toString());

    exports.log.info('(re)configuration completed; fxpay version:',
                     exports.libVersion);
    exports.alreadyConfigured = true;

    return exports;
  };


  exports.initialize = function(newSettings) {
    //
    // A hook to ensure that settings have been initialized.
    // Any public fxpay method that a user may call should call
    // this at the top. It can be called repeatedly without harm.
    //
    // When a newSettings object is defined, all settings will be
    // reconfigured with those values.
    //
    if (typeof newSettings === 'object' && newSettings) {
      exports.configure(newSettings);
    } else if (!exports.alreadyConfigured) {
      exports.configure();
    }
  };

});
